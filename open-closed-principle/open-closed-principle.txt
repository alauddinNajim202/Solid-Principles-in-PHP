What is the Open-Closed Principle?

The Open-Closed Principle, one of the SOLID principles, states that 

    software entities (classes, modules, functions) 
    should be open for extension but closed for modification. 

In simpler terms, we should be able to extend the behavior
of a class without modifying its existing code. This promotes code reusability and makes our 
applications more flexible 
and easier to maintain.

The Open/Closed Principle (OCP) is one of the SOLID principles of object-oriented design. It states that:

"Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification."

This means that once a class is written and tested, it should not be modified to add new functionality. Instead, we should extend it (using inheritance or interfaces) to introduce new functionality, keeping the existing code unchanged.

Key Idea:
Open for Extension: You can extend the class's behavior.
Closed for Modification: The class should not be modified when you want to add new behavior.
Why Use the Open/Closed Principle?
By following this principle, we reduce the risk of introducing bugs in existing code while adding new features.
It promotes maintainability and flexibility in a codebase.